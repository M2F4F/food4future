//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Core/Managers/Script/ARInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ARInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ARInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ARInputActions"",
    ""maps"": [
        {
            ""name"": ""ARMaps"",
            ""id"": ""f1221a5f-1e80-4774-bcb8-b330d4f37fef"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""31a1d26e-d5da-4f40-ac64-2a68174c7db1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""ab4b8610-fa38-4842-84bd-e34dcd92cd39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""111eda04-6b00-4596-b5d8-4af13507009d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50042689-0891-4e54-9944-8d37e83d907b"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ARMaps
        m_ARMaps = asset.FindActionMap("ARMaps", throwIfNotFound: true);
        m_ARMaps_Newaction = m_ARMaps.FindAction("New action", throwIfNotFound: true);
        m_ARMaps_TouchPress = m_ARMaps.FindAction("TouchPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ARMaps
    private readonly InputActionMap m_ARMaps;
    private List<IARMapsActions> m_ARMapsActionsCallbackInterfaces = new List<IARMapsActions>();
    private readonly InputAction m_ARMaps_Newaction;
    private readonly InputAction m_ARMaps_TouchPress;
    public struct ARMapsActions
    {
        private @ARInputActions m_Wrapper;
        public ARMapsActions(@ARInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_ARMaps_Newaction;
        public InputAction @TouchPress => m_Wrapper.m_ARMaps_TouchPress;
        public InputActionMap Get() { return m_Wrapper.m_ARMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ARMapsActions set) { return set.Get(); }
        public void AddCallbacks(IARMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_ARMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ARMapsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @TouchPress.started += instance.OnTouchPress;
            @TouchPress.performed += instance.OnTouchPress;
            @TouchPress.canceled += instance.OnTouchPress;
        }

        private void UnregisterCallbacks(IARMapsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @TouchPress.started -= instance.OnTouchPress;
            @TouchPress.performed -= instance.OnTouchPress;
            @TouchPress.canceled -= instance.OnTouchPress;
        }

        public void RemoveCallbacks(IARMapsActions instance)
        {
            if (m_Wrapper.m_ARMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IARMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_ARMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ARMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ARMapsActions @ARMaps => new ARMapsActions(this);
    public interface IARMapsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnTouchPress(InputAction.CallbackContext context);
    }
}
